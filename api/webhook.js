const axios = require('axios');
const { getPrice, getTopCryptos } = require('../src/services/bybit');

const TELEGRAM_API = `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}`;

// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ Blum
const BLUM_TOKENS = process.env.BLUM_TOKENS ? process.env.BLUM_TOKENS.split(',') : [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async function sendMessage(chatId, text) {
  try {
    const response = await axios.post(`${TELEGRAM_API}/sendMessage`, {
      chat_id: chatId,
      text: text,
      parse_mode: 'HTML'
    });
    return response.data;
  } catch (error) {
    console.error('Error sending message:', error.response?.data || error.message);
    throw error;
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async function handleStart(chatId) {
  console.log('Handling /start command');
  await sendMessage(chatId,
    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Earth Wallet Bot! üåç\n\n' +
    '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
    '/price <—Å–∏–º–≤–æ–ª> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: /price BTCUSDT)\n' +
    '/top - –¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤\n' +
    '/blumtokens - –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ Blum\n' +
    '/help - –ü–æ–º–æ—â—å'
  );
}

async function handlePrice(chatId, match) {
  console.log('Handling /price command');
  const symbol = match[1]?.toUpperCase();

  if (!symbol) {
    await sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–∏–º–≤–æ–ª. –ù–∞–ø—Ä–∏–º–µ—Ä: /price BTCUSDT');
    return;
  }

  const price = await getPrice(symbol);
  if (price) {
    await sendMessage(chatId, `üí∞ –¶–µ–Ω–∞ ${symbol}: ${price} USDT`);
  } else {
    await sendMessage(chatId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è ${symbol}`);
  }
}

async function handleTop(chatId) {
  console.log('Handling /top command');
  const topCryptos = await getTopCryptos();

  if (topCryptos) {
    let message = 'üìä –¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤:\n\n';
    topCryptos.forEach((crypto, index) => {
      const change = parseFloat(crypto.change24h) * 100;
      const changeEmoji = change >= 0 ? 'üü¢' : 'üî¥';
      message += `${index + 1}. ${crypto.symbol} ${changeEmoji}\n`;
      message += `   üíµ –¶–µ–Ω–∞: ${crypto.price} USDT\n`;
      message += `   üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ (24—á): ${change.toFixed(2)}%\n`;
      message += `   üìä –û–±—ä–µ–º: ${parseFloat(crypto.volume).toFixed(2)} USDT\n\n`;
    });
    await sendMessage(chatId, message);
  } else {
    await sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö');
  }
}

async function handleBlumTokens(chatId) {
  console.log('Handling /blumtokens command');
  
  if (BLUM_TOKENS.length === 0) {
    await sendMessage(chatId, '‚ùå –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ Blum –ø—É—Å—Ç');
    return;
  }

  let message = 'üìã –¢–æ–∫–µ–Ω—ã Blum:\n\n';
  for (const token of BLUM_TOKENS) {
    const price = await getPrice(`${token}USDT`);
    message += `${token}: ${price ? price + ' USDT' : '–¶–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}\n`;
  }
  
  await sendMessage(chatId, message);
}

async function handleHelp(chatId) {
  console.log('Handling /help command');
  await sendMessage(chatId,
    'ü§ñ –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n' +
    '/price <—Å–∏–º–≤–æ–ª> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: /price BTCUSDT)\n' +
    '/top - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤\n' +
    '/blumtokens - –ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–æ–≤ Blum\n' +
    '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ'
  );
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
module.exports = async (req, res) => {
  try {
    if (req.method !== 'POST') {
      return res.status(200).json({ message: 'Only POST requests are accepted' });
    }

    const { message } = req.body;
    console.log('Received update:', JSON.stringify(req.body, null, 2));

    if (!message || !message.text) {
      console.log('No message or text in update');
      return res.status(200).json({ message: 'No message in request' });
    }

    const chatId = message.chat.id;
    const text = message.text;
    console.log('Processing message:', text, 'from chat:', chatId);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    res.status(200).json({ message: 'Processing message' });

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    try {
      if (text.startsWith('/start')) {
        await handleStart(chatId);
      } else if (text.startsWith('/price')) {
        const match = text.match(/\/price(?:\s+(.+))?/);
        await handlePrice(chatId, match);
      } else if (text.startsWith('/top')) {
        await handleTop(chatId);
      } else if (text.startsWith('/blumtokens')) {
        await handleBlumTokens(chatId);
      } else if (text.startsWith('/help')) {
        await handleHelp(chatId);
      }
      console.log('Message processed successfully');
    } catch (error) {
      console.error('Error processing command:', error);
      try {
        await sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      } catch (sendError) {
        console.error('Error sending error message:', sendError);
      }
    }
  } catch (error) {
    console.error('Error processing webhook:', error);
    return res.status(500).json({ error: error.message });
  }
}; 