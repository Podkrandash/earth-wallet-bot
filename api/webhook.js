const TelegramBot = require('node-telegram-bot-api');
const { getPrice, getTopCryptos } = require('../src/services/bybit');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, {
  webHook: true
});

// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ Blum
const BLUM_TOKENS = process.env.BLUM_TOKENS ? process.env.BLUM_TOKENS.split(',') : [];

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async function handleStart(msg) {
  console.log('Handling /start command');
  const chatId = msg.chat.id;
  try {
    await bot.sendMessage(chatId,
      '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Earth Wallet Bot! üåç\n\n' +
      '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
      '/price <—Å–∏–º–≤–æ–ª> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: /price BTCUSDT)\n' +
      '/top - –¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤\n' +
      '/blumtokens - –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ Blum\n' +
      '/help - –ü–æ–º–æ—â—å'
    );
    console.log('Start message sent successfully');
  } catch (error) {
    console.error('Error sending start message:', error);
    throw error;
  }
}

async function handlePrice(msg, match) {
  console.log('Handling /price command');
  const chatId = msg.chat.id;
  const symbol = match[1]?.toUpperCase();

  try {
    if (!symbol) {
      await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–∏–º–≤–æ–ª. –ù–∞–ø—Ä–∏–º–µ—Ä: /price BTCUSDT');
      return;
    }

    const price = await getPrice(symbol);
    if (price) {
      await bot.sendMessage(chatId, `üí∞ –¶–µ–Ω–∞ ${symbol}: ${price} USDT`);
    } else {
      await bot.sendMessage(chatId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è ${symbol}`);
    }
  } catch (error) {
    console.error('Error in price handler:', error);
    throw error;
  }
}

async function handleTop(msg) {
  console.log('Handling /top command');
  const chatId = msg.chat.id;
  
  try {
    const topCryptos = await getTopCryptos();

    if (topCryptos) {
      let message = 'üìä –¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤:\n\n';
      topCryptos.forEach((crypto, index) => {
        const change = parseFloat(crypto.change24h) * 100;
        const changeEmoji = change >= 0 ? 'üü¢' : 'üî¥';
        message += `${index + 1}. ${crypto.symbol} ${changeEmoji}\n`;
        message += `   üíµ –¶–µ–Ω–∞: ${crypto.price} USDT\n`;
        message += `   üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ (24—á): ${change.toFixed(2)}%\n`;
        message += `   üìä –û–±—ä–µ–º: ${parseFloat(crypto.volume).toFixed(2)} USDT\n\n`;
      });
      await bot.sendMessage(chatId, message);
    } else {
      await bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö');
    }
  } catch (error) {
    console.error('Error in top handler:', error);
    throw error;
  }
}

async function handleBlumTokens(msg) {
  console.log('Handling /blumtokens command');
  const chatId = msg.chat.id;
  
  try {
    if (BLUM_TOKENS.length === 0) {
      await bot.sendMessage(chatId, '‚ùå –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ Blum –ø—É—Å—Ç');
      return;
    }

    let message = 'üìã –¢–æ–∫–µ–Ω—ã Blum:\n\n';
    for (const token of BLUM_TOKENS) {
      const price = await getPrice(`${token}USDT`);
      message += `${token}: ${price ? price + ' USDT' : '–¶–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}\n`;
    }
    
    await bot.sendMessage(chatId, message);
  } catch (error) {
    console.error('Error in blumtokens handler:', error);
    throw error;
  }
}

async function handleHelp(msg) {
  console.log('Handling /help command');
  const chatId = msg.chat.id;
  
  try {
    await bot.sendMessage(chatId,
      'ü§ñ –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n' +
      '/price <—Å–∏–º–≤–æ–ª> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: /price BTCUSDT)\n' +
      '/top - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤\n' +
      '/blumtokens - –ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–æ–≤ Blum\n' +
      '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ'
    );
  } catch (error) {
    console.error('Error in help handler:', error);
    throw error;
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
module.exports = async (req, res) => {
  try {
    console.log('Received webhook request:', {
      method: req.method,
      body: req.body,
      headers: req.headers
    });

    if (req.method === 'POST') {
      const update = req.body;
      console.log('Received update:', JSON.stringify(update, null, 2));

      if (!update || !update.message) {
        console.log('No message in update');
        return res.status(200).json({ message: 'No message in request' });
      }

      const message = update.message;
      const text = message.text || '';
      console.log('Processing message:', text);

      try {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if (text.startsWith('/start')) {
          await handleStart(message);
        } else if (text.startsWith('/price')) {
          const match = text.match(/\/price(?:\s+(.+))?/);
          await handlePrice(message, match);
        } else if (text.startsWith('/top')) {
          await handleTop(message);
        } else if (text.startsWith('/blumtokens')) {
          await handleBlumTokens(message);
        } else if (text.startsWith('/help')) {
          await handleHelp(message);
        }

        console.log('Message processed successfully');
        return res.status(200).json({ message: 'Success' });
      } catch (error) {
        console.error('Error processing command:', error);
        return res.status(500).json({ error: 'Error processing command' });
      }
    }

    console.log('Not a POST request');
    return res.status(200).json({ message: 'Only POST requests are accepted' });
  } catch (error) {
    console.error('Error processing webhook:', error);
    return res.status(500).json({ error: error.message });
  }
}; 