const TelegramBot = require('node-telegram-bot-api');
const { getPrice, getTopCryptos } = require('../src/services/bybit');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN);

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
const url = `https://${process.env.VERCEL_URL}`;
bot.setWebHook(`${url}/api/webhook`);

// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ Blum
const BLUM_TOKENS = process.env.BLUM_TOKENS ? process.env.BLUM_TOKENS.split(',') : [];

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async function handleStart(msg) {
  const chatId = msg.chat.id;
  return bot.sendMessage(chatId,
    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Earth Wallet Bot! üåç\n\n' +
    '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
    '/price <—Å–∏–º–≤–æ–ª> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: /price BTCUSDT)\n' +
    '/top - –¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤\n' +
    '/blumtokens - –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ Blum\n' +
    '/help - –ü–æ–º–æ—â—å'
  );
}

async function handlePrice(msg, match) {
  const chatId = msg.chat.id;
  const symbol = match[1]?.toUpperCase();

  if (!symbol) {
    return bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–∏–º–≤–æ–ª. –ù–∞–ø—Ä–∏–º–µ—Ä: /price BTCUSDT');
  }

  const price = await getPrice(symbol);
  if (price) {
    return bot.sendMessage(chatId, `üí∞ –¶–µ–Ω–∞ ${symbol}: ${price} USDT`);
  } else {
    return bot.sendMessage(chatId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è ${symbol}`);
  }
}

async function handleTop(msg) {
  const chatId = msg.chat.id;
  const topCryptos = await getTopCryptos();

  if (topCryptos) {
    let message = 'üìä –¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤:\n\n';
    topCryptos.forEach((crypto, index) => {
      const change = parseFloat(crypto.change24h) * 100;
      const changeEmoji = change >= 0 ? 'üü¢' : 'üî¥';
      message += `${index + 1}. ${crypto.symbol} ${changeEmoji}\n`;
      message += `   üíµ –¶–µ–Ω–∞: ${crypto.price} USDT\n`;
      message += `   üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ (24—á): ${change.toFixed(2)}%\n`;
      message += `   üìä –û–±—ä–µ–º: ${parseFloat(crypto.volume).toFixed(2)} USDT\n\n`;
    });
    return bot.sendMessage(chatId, message);
  } else {
    return bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö');
  }
}

async function handleBlumTokens(msg) {
  const chatId = msg.chat.id;
  
  if (BLUM_TOKENS.length === 0) {
    return bot.sendMessage(chatId, '‚ùå –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ Blum –ø—É—Å—Ç');
  }

  let message = 'üìã –¢–æ–∫–µ–Ω—ã Blum:\n\n';
  for (const token of BLUM_TOKENS) {
    const price = await getPrice(`${token}USDT`);
    message += `${token}: ${price ? price + ' USDT' : '–¶–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}\n`;
  }
  
  return bot.sendMessage(chatId, message);
}

async function handleHelp(msg) {
  const chatId = msg.chat.id;
  return bot.sendMessage(chatId,
    'ü§ñ –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n' +
    '/price <—Å–∏–º–≤–æ–ª> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: /price BTCUSDT)\n' +
    '/top - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤\n' +
    '/blumtokens - –ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–æ–≤ Blum\n' +
    '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ'
  );
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
module.exports = async (req, res) => {
  if (req.method === 'POST') {
    const { message } = req.body;
    
    if (!message) {
      return res.status(200).json({ message: 'No message in request' });
    }

    const text = message.text || '';

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if (text.startsWith('/start')) {
      await handleStart(message);
    } else if (text.startsWith('/price')) {
      const match = text.match(/\/price(?:\s+(.+))?/);
      await handlePrice(message, match);
    } else if (text.startsWith('/top')) {
      await handleTop(message);
    } else if (text.startsWith('/blumtokens')) {
      await handleBlumTokens(message);
    } else if (text.startsWith('/help')) {
      await handleHelp(message);
    }

    return res.status(200).json({ message: 'Success' });
  }

  return res.status(200).json({ message: 'Only POST requests are accepted' });
}; 